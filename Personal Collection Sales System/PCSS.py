#FULLA, DANA GRACE AND LAGURA, ALLORA BLESSE
#PERSONAL COLLECTION SALES SYSTEM

import tempfile
import win32api
from win32printing import Printer

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QDateTime
import mysql.connector
from mysql.connector import  errorcode
from mysql.connector.constants import CharacterSet, FieldFlag


#Home Module
class Ui_StartUp(QtWidgets.QMainWindow):
    def setupUi(self, StartUp):
        StartUp.setObjectName("StartUp")
        StartUp.resize(864, 630)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(StartUp.sizePolicy().hasHeightForWidth())
        StartUp.setSizePolicy(sizePolicy)
        StartUp.setMinimumSize(QtCore.QSize(461, 309))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        StartUp.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(12)
        StartUp.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("HomeIcon.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        StartUp.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(StartUp)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.CustomerButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CustomerButton.sizePolicy().hasHeightForWidth())
        self.CustomerButton.setSizePolicy(sizePolicy)
        self.CustomerButton.setMinimumSize(QtCore.QSize(120, 40))
        self.CustomerButton.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(16)
        self.CustomerButton.setFont(font)
        self.CustomerButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.CustomerButton.setStyleSheet("\n"
"\n"
"\n"
"background-color: rgb(206, 206, 206);")
        self.CustomerButton.setObjectName("CustomerButton")
        self.gridLayout.addWidget(self.CustomerButton, 2, 1, 1, 1)
        self.SellerButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SellerButton.sizePolicy().hasHeightForWidth())
        self.SellerButton.setSizePolicy(sizePolicy)
        self.SellerButton.setMinimumSize(QtCore.QSize(120, 40))
        self.SellerButton.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(16)
        self.SellerButton.setFont(font)
        self.SellerButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.SellerButton.setStyleSheet("background-color: rgb(206, 206, 206);")
        self.SellerButton.setObjectName("SellerButton")
        self.gridLayout.addWidget(self.SellerButton, 2, 3, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(44, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(44, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 4, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(75, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 2, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(440, 50))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 5))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(28)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 5)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(330, 90))
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setFamily("Pristina")
        font.setPointSize(48)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 0, 1, 5)
        StartUp.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(StartUp)
        self.statusbar.setObjectName("statusbar")
        StartUp.setStatusBar(self.statusbar)

        self.retranslateUi(StartUp)
        QtCore.QMetaObject.connectSlotsByName(StartUp)

        self.SellerButton.clicked.connect(self.OpenLogin)
        self.SellerButton.clicked.connect(StartUp.hide)
        self.CustomerButton.clicked.connect(self.OpenCustomer)
        self.CustomerButton.clicked.connect(StartUp.hide)

    def retranslateUi(self, StartUp):
        _translate = QtCore.QCoreApplication.translate
        StartUp.setWindowTitle(_translate("StartUp", "Home"))
        self.CustomerButton.setText(_translate("StartUp", "Customer"))
        self.SellerButton.setText(_translate("StartUp", "Seller"))
        self.label_2.setText(_translate("StartUp", "I\'m a"))
        self.label_3.setText(_translate("StartUp", "Welcome to Personal Collection"))

    # Access Log In
    def OpenLogin(self):
        Login.show()

    # Access Customer Screen/ Module
    def OpenCustomer(self):
        CustomerScrn.showMaximized()


    def closeEvent(self, event):
        close1 = QMessageBox()
        close1.setWindowTitle("Close Program")
        close1.setText("Are You sure to Close the Program?")
        close1.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        Done1 = close1.exec()

        if Done1 == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

#Log-in Module
class Ui_Login(QtWidgets.QMainWindow):
    def setupUi(self, Login):
        Login.setObjectName("Login")
        Login.resize(657, 442)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Login.sizePolicy().hasHeightForWidth())
        Login.setSizePolicy(sizePolicy)
        Login.setMinimumSize(QtCore.QSize(657, 442))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        Login.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("LoginIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Login.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(Login)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.TItle = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TItle.sizePolicy().hasHeightForWidth())
        self.TItle.setSizePolicy(sizePolicy)
        self.TItle.setMinimumSize(QtCore.QSize(431, 40))
        self.TItle.setMaximumSize(QtCore.QSize(16777215, 50))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.TItle.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Pristina")
        font.setPointSize(28)
        font.setBold(False)
        font.setWeight(50)
        self.TItle.setFont(font)
        self.TItle.setStyleSheet("color: rgb(255, 0, 0);")
        self.TItle.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.TItle.setFrameShadow(QtWidgets.QFrame.Plain)
        self.TItle.setAlignment(QtCore.Qt.AlignCenter)
        self.TItle.setObjectName("TItle")
        self.gridLayout.addWidget(self.TItle, 0, 0, 1, 7)
        self.TItle_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TItle_2.sizePolicy().hasHeightForWidth())
        self.TItle_2.setSizePolicy(sizePolicy)
        self.TItle_2.setMinimumSize(QtCore.QSize(431, 30))
        self.TItle_2.setMaximumSize(QtCore.QSize(16777215, 40))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.TItle_2.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.TItle_2.setFont(font)
        self.TItle_2.setStyleSheet("rgb 000 000 000")
        self.TItle_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.TItle_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.TItle_2.setAlignment(QtCore.Qt.AlignCenter)
        self.TItle_2.setObjectName("TItle_2")
        self.gridLayout.addWidget(self.TItle_2, 1, 0, 1, 7)
        self.Name = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Name.sizePolicy().hasHeightForWidth())
        self.Name.setSizePolicy(sizePolicy)
        self.Name.setMinimumSize(QtCore.QSize(290, 30))
        self.Name.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(12)
        self.Name.setFont(font)
        self.Name.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Name.setText("")
        self.Name.setClearButtonEnabled(True)
        self.Name.setObjectName("Name")
        self.gridLayout.addWidget(self.Name, 2, 2, 1, 3)
        self.Password = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Password.sizePolicy().hasHeightForWidth())
        self.Password.setSizePolicy(sizePolicy)
        self.Password.setMinimumSize(QtCore.QSize(290, 30))
        self.Password.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("SimSun")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Password.setFont(font)
        self.Password.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 9pt \"SimSun\";")
        self.Password.setText("")
        self.Password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Password.setClearButtonEnabled(True)
        self.Password.setObjectName("Password")
        self.gridLayout.addWidget(self.Password, 3, 2, 1, 3)
        spacerItem = QtWidgets.QSpacerItem(66, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 5, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(70, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 5, 5, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(78, 27, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 7, 4, 1, 1)
        self.changepass = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.changepass.sizePolicy().hasHeightForWidth())
        self.changepass.setSizePolicy(sizePolicy)
        self.changepass.setMinimumSize(QtCore.QSize(81, 21))
        self.changepass.setMaximumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.changepass.setFont(font)
        self.changepass.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.changepass.setObjectName("changepass")
        self.gridLayout.addWidget(self.changepass, 5, 4, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(79, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 7, 2, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(78, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem4, 7, 5, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(75, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem5, 7, 6, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(78, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem6, 7, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(78, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem7, 7, 1, 1, 1)
        self.loginbutton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.loginbutton.sizePolicy().hasHeightForWidth())
        self.loginbutton.setSizePolicy(sizePolicy)
        self.loginbutton.setMinimumSize(QtCore.QSize(120, 30))
        self.loginbutton.setMaximumSize(QtCore.QSize(130, 40))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.loginbutton.setFont(font)
        self.loginbutton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.loginbutton.setStyleSheet("background-color: rgb(206, 206, 206);")
        self.loginbutton.setObjectName("loginbutton")
        self.gridLayout.addWidget(self.loginbutton, 7, 3, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(92, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem8, 5, 2, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(61, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem9, 5, 6, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem10, 5, 1, 1, 1)
        self.cplabel = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cplabel.sizePolicy().hasHeightForWidth())
        self.cplabel.setSizePolicy(sizePolicy)
        self.cplabel.setMinimumSize(QtCore.QSize(131, 20))
        self.cplabel.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.cplabel.setFont(font)
        self.cplabel.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.cplabel.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextSelectableByMouse)
        self.cplabel.setObjectName("cplabel")
        self.gridLayout.addWidget(self.cplabel, 5, 3, 1, 1)
        Login.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Login)
        self.statusbar.setObjectName("statusbar")
        Login.setStatusBar(self.statusbar)

        self.retranslateUi(Login)
        QtCore.QMetaObject.connectSlotsByName(Login)

        self.loginbutton.clicked.connect(self.AccessOwner)
        self.loginbutton.clicked.connect(Login.hide)

        self.changepass.clicked.connect(self.PasswordAccessChange)

    def retranslateUi(self, Login):
        _translate = QtCore.QCoreApplication.translate
        Login.setWindowTitle(_translate("Login", "LogIn"))
        self.TItle.setText(_translate("Login", "PERSONAL   COLLECTION"))
        self.TItle_2.setText(_translate("Login", "Welcome Owner!!!"))
        self.Name.setPlaceholderText(_translate("Login", "Name"))
        self.Password.setPlaceholderText(_translate("Login", "Password"))
        self.changepass.setText(_translate("Login", "Click Here"))
        self.loginbutton.setText(_translate("Login", "Log In"))
        self.loginbutton.setShortcut(_translate("Login", "Return"))
        self.cplabel.setText(_translate("Login", "<html><head/><body><p align=\"right\"><span style=\" color:#ff0000;\">Change Password?</span></p></body></html>"))
    
    #Change Password
    def PasswordAccessChange(self):
        change = QMessageBox()
        change.setWindowTitle("Change Password")
        change.setText("Are You sure to change your password?")
        change.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        rep = change.exec()

        if rep == QMessageBox.Yes:
            Changepass.show()
            Login.hide()

        else:
            pass

    # Access Owner Screen/ Module
    def AccessOwner(self):
        
        try:

            self.mydb = mysql.connector.connect(host= "localhost",user = "root",password = "pass",database = "pcsssys")            
            self.mycursor = self.mydb.cursor()
            
            self.mycursor.execute("SELECT Password FROM log_in")
            self.getpass = self.mycursor.fetchone()
            self.password2 = (self.getpass[0])
            
            self.mycursor.execute("SELECT Name FROM log_in")
            self.getuname = self.mycursor.fetchone()
            self.username = (self.getuname[0])
            
        except mysql.connector.Error as e: 
            print('Error')
        
    
        name2 = self.Name.text()
        password2 = self.Password.text()

        if len(name2)==0 or len(password2)==0:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning!")
            msg1.setText("Please Fll Up the Missing Input")
            msg1.setIcon(QMessageBox.Warning)
            msg1.setStandardButtons(QMessageBox.Ok)
            msg1.exec_()

            StartUp.show()

        else:

            if name2 == self.username:
                if password2 == self.password2:

                    self.Name.clear()
                    self.Password.clear()
                    OwnerScrn.showMaximized()
                    
                else:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Error")
                    msg1.setText("Incorrect Password")
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setStandardButtons(QMessageBox.Ok)
                    msg1.exec_()

                    self.Password.clear()
                    self.Name.clear()
                    StartUp.show()
            else:
                
                msger = QMessageBox()
                msger.setWindowTitle("Error")
                msger.setText("Incorect Username or Password")
                msger.setIcon(QMessageBox.Critical)
                msger.exec_()
                self.Name.clear()
                self.Password.clear()

                StartUp.show()
                

    def closeEvent(self, event):
            close = QMessageBox()
            close.setWindowTitle("Close")
            close.setText("Are You sure?")
            close.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
            Done = close.exec()

            if Done == QMessageBox.Yes:
                event.accept()
                StartUp.show()
            else:
                event.ignore()

#ChangePasswordDialog
class Ui_Changepass(QtWidgets.QMainWindow):
    def setupUi(self, Changepass):
        Changepass.setObjectName("Changepass")
        Changepass.resize(488, 418)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Changepass.sizePolicy().hasHeightForWidth())
        Changepass.setSizePolicy(sizePolicy)
        Changepass.setMinimumSize(QtCore.QSize(488, 418))
        Changepass.setMaximumSize(QtCore.QSize(488, 418))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        Changepass.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("change.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Changepass.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(Changepass)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(22, 10, 455, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(21, 159, 108, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(21, 59, 144, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.confirm = QtWidgets.QLineEdit(self.centralwidget)
        self.confirm.setGeometry(QtCore.QRect(60, 273, 401, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.confirm.sizePolicy().hasHeightForWidth())
        self.confirm.setSizePolicy(sizePolicy)
        self.confirm.setClearButtonEnabled(True)
        self.confirm.setMinimumSize(QtCore.QSize(401, 31))
        self.confirm.setMaximumSize(QtCore.QSize(401, 31))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(12)
        self.confirm.setFont(font)
        self.confirm.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirm.setObjectName("confirm")
        self.current = QtWidgets.QLineEdit(self.centralwidget)
        self.current.setGeometry(QtCore.QRect(60, 86, 401, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.current.sizePolicy().hasHeightForWidth())
        self.current.setSizePolicy(sizePolicy)
        self.current.setMinimumSize(QtCore.QSize(401, 31))
        self.current.setMaximumSize(QtCore.QSize(401, 31))
        self.current.setClearButtonEnabled(True)
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(12)
        self.current.setFont(font)
        self.current.setEchoMode(QtWidgets.QLineEdit.Password)
        self.current.setObjectName("current")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(21, 249, 144, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.save = QtWidgets.QPushButton(self.centralwidget)
        self.save.setGeometry(QtCore.QRect(180, 340, 131, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save.sizePolicy().hasHeightForWidth())
        self.save.setSizePolicy(sizePolicy)
        self.save.setMinimumSize(QtCore.QSize(131, 31))
        self.save.setMaximumSize(QtCore.QSize(131, 31))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(12)
        self.save.setFont(font)
        self.save.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.save.setObjectName("save")
        self.new_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.new_2.setGeometry(QtCore.QRect(60, 180, 401, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.new_2.sizePolicy().hasHeightForWidth())
        self.new_2.setSizePolicy(sizePolicy)
        self.new_2.setMinimumSize(QtCore.QSize(401, 31))
        self.new_2.setMaximumSize(QtCore.QSize(401, 31))
        self.new_2.setClearButtonEnabled(True)
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(12)
        self.new_2.setFont(font)
        self.new_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.new_2.setObjectName("new_2")
        self.Labelconfirm = QtWidgets.QLabel(self.centralwidget)
        self.Labelconfirm.setGeometry(QtCore.QRect(60, 310, 401, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Labelconfirm.sizePolicy().hasHeightForWidth())
        self.Labelconfirm.setSizePolicy(sizePolicy)
        self.Labelconfirm.setMinimumSize(QtCore.QSize(401, 21))
        self.Labelconfirm.setMaximumSize(QtCore.QSize(401, 21))

        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(10)
        self.Labelconfirm.setFont(font)
        self.Labelconfirm.setObjectName("Labelconfirm")
        Changepass.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Changepass)
        self.statusbar.setObjectName("statusbar")
        Changepass.setStatusBar(self.statusbar)

        self.retranslateUi(Changepass)
        QtCore.QMetaObject.connectSlotsByName(Changepass)
        
        regexp3 = QtCore.QRegExp("[a-z-A-Z 0-9 _().&+-]+")
        validator3 = QtGui.QRegExpValidator(regexp3)
        self.confirm.setValidator(validator3)
        self.current.setValidator(validator3)
        self.new_2.setValidator(validator3)

        self.save.clicked.connect(self.saved)

    def retranslateUi(self, Changepass):
        _translate = QtCore.QCoreApplication.translate
        Changepass.setWindowTitle(_translate("Changepass", "Change Passsword"))
        self.label.setText(_translate("Changepass", "Change Password"))
        self.label_3.setText(_translate("Changepass", "New Password"))
        self.label_2.setText(_translate("Changepass", "Current Password"))
        self.confirm.setPlaceholderText(_translate("Changepass", "Confirm Password"))
        self.current.setPlaceholderText(_translate("Changepass", "Enter Current Password"))
        self.label_4.setText(_translate("Changepass", "Confirm Password"))
        self.save.setText(_translate("Changepass", "Save Changes"))
        self.new_2.setPlaceholderText(_translate("Changepass", "Enter New Password"))
        self.Labelconfirm.setText(_translate("Changepass", "<html><head/><body><p><br/></p></body></html>"))


    def closeEvent(self, event):
        close = QMessageBox()
        close.setWindowTitle("Cancelled")
        close.setText("Password not Changed")
        close.setStandardButtons(QMessageBox.Ok)
        close.exec()
        
        Login.show()

        event.accept()

    def message3(self):
        mg1 = QMessageBox()
        mg1.setWindowTitle("Saved")
        mg1.setText("New Password Saved")
        mg1.setIcon(QMessageBox.Information)
        mg1.setStandardButtons(QMessageBox.Ok)
        mg1.exec()
        
    #New Password Save

    def saved(self):
        self.mydata = mysql.connector.connect(host='localhost', username='root', password='pass', database= 'pcsssys')
        self.mycursor = self.mydata.cursor()

        curpass = self.current.text()
        newpass = self.new_2.text()
        newpassconfirm = self.confirm.text()

        if newpass == newpassconfirm:
            self.Labelconfirm.setText(" ")
            query = "SELECT Password FROM log_in WHERE  Password ='" + curpass + "'"
            self.mycursor.execute(query)
            self.result = self.mycursor.fetchone()

            if self.result == None:
                mb2 = QMessageBox()
                mb2.setWindowTitle("Something went Wrong")
                mb2.setText("Current Password is Incorrect or Current Password is Missing")
                mb2.exec()

                self.current.clear()
                self.confirm.clear()
                self.new_2.clear()

            else:
                mb3 = QMessageBox()
                mb3.setWindowTitle("Confirm Save")
                mb3.setText("Save changes?")
                mb3.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                savechange = mb3.exec()

                if savechange == QMessageBox.Yes:

                    updatequery = "UPDATE log_in SET password ='" + newpassconfirm + "' WHERE name = 'PcssAdmin' "
                    self.mycursor.execute(updatequery)
                    self.mydata.commit()

                    self.current.clear()
                    self.confirm.clear()
                    self.new_2.clear()

                    self.message3()

                    Changepass.hide()
                    Login.show()

                else:
                    QMessageBox.warning(self, "Error","Updated New password Cancelled")
                    self.current.clear()
                    self.new_2.clear()
                    self.confirm.clear()
                    Login.show()
                    Changepass.hide()
        else:
            self.Labelconfirm.setText("New Password and Confirm Password NOT Matched")
            
#Owner Module/Screen
class Ui_OwnerScrn(QtWidgets.QMainWindow):
    def setupUi(self, OwnerScrn):
        OwnerScrn.setObjectName("OwnerScrn")
        OwnerScrn.resize(1176, 803)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(OwnerScrn.sizePolicy().hasHeightForWidth())
        OwnerScrn.setSizePolicy(sizePolicy)
        OwnerScrn.setMinimumSize(QtCore.QSize(800, 580))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        OwnerScrn.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("sellericon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        OwnerScrn.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(OwnerScrn)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        self.label_14.setMinimumSize(QtCore.QSize(300, 120))
        self.label_14.setMaximumSize(QtCore.QSize(500, 16777215))
        font = QtGui.QFont()
        font.setFamily("Pristina")
        font.setPointSize(14)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_14.setObjectName("label_14")
        self.gridLayout_3.addWidget(self.label_14, 0, 0, 3, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(440, 20))
        self.label.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 1, 2, 1, 2)
        self.Inventory = QtWidgets.QTableWidget(self.centralwidget)
        self.Inventory.setEnabled(True)
        self.Inventory.setMinimumSize(QtCore.QSize(440, 350))
        self.Inventory.setMaximumSize(QtCore.QSize(16777215, 16777215))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.Inventory.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Inventory.setFont(font)
        self.Inventory.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Inventory.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Inventory.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.Inventory.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.Inventory.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.Inventory.setAlternatingRowColors(True)
        self.Inventory.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.Inventory.setShowGrid(True)
        self.Inventory.setWordWrap(False)
        self.Inventory.setRowCount(0)
        self.Inventory.setColumnCount(4)
        self.Inventory.setObjectName("Inventory")
        item = QtWidgets.QTableWidgetItem()
        self.Inventory.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Inventory.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Inventory.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Inventory.setHorizontalHeaderItem(3, item)
        self.Inventory.horizontalHeader().setDefaultSectionSize(240)
        self.Inventory.horizontalHeader().setHighlightSections(True)
        self.Inventory.horizontalHeader().setSortIndicatorShown(True)
        self.Inventory.verticalHeader().setDefaultSectionSize(44)
        self.Inventory.verticalHeader().setMinimumSectionSize(37)
        self.gridLayout_3.addWidget(self.Inventory, 2, 2, 4, 2)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setMinimumSize(QtCore.QSize(330, 45))
        self.frame_3.setMaximumSize(QtCore.QSize(500, 16777215))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.frame_3.setPalette(palette)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setLineWidth(2)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout.setObjectName("gridLayout")
        self.OpenTransButton = QtWidgets.QPushButton(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OpenTransButton.sizePolicy().hasHeightForWidth())
        self.OpenTransButton.setSizePolicy(sizePolicy)
        self.OpenTransButton.setMinimumSize(QtCore.QSize(200, 25))
        self.OpenTransButton.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(11)
        self.OpenTransButton.setFont(font)
        self.OpenTransButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.OpenTransButton.setStyleSheet("background-color: rgb(208, 208, 208);\n"
"")
        self.OpenTransButton.setObjectName("OpenTransButton")
        self.gridLayout.addWidget(self.OpenTransButton, 0, 0, 1, 1)
        self.gridLayout_3.addWidget(self.frame_3, 3, 0, 1, 2)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setMinimumSize(QtCore.QSize(330, 160))
        self.frame_2.setMaximumSize(QtCore.QSize(500, 16777215))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.frame_2.setPalette(palette)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setLineWidth(2)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_36 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_36.sizePolicy().hasHeightForWidth())
        self.label_36.setSizePolicy(sizePolicy)
        self.label_36.setMinimumSize(QtCore.QSize(111, 25))
        self.label_36.setMaximumSize(QtCore.QSize(150, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(12)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("color: rgb(255, 0, 0);\n"
"")
        self.label_36.setObjectName("label_36")
        self.gridLayout_2.addWidget(self.label_36, 2, 0, 1, 1)
        self.Price = QtWidgets.QDoubleSpinBox(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Price.sizePolicy().hasHeightForWidth())
        self.Price.setSizePolicy(sizePolicy)
        self.Price.setMinimumSize(QtCore.QSize(160, 25))
        self.Price.setMaximumSize(QtCore.QSize(16777215, 31))
        font = QtGui.QFont()
        font.setFamily("SimSun")
        font.setPointSize(10)
        self.Price.setFont(font)
        self.Price.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.Price.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"")
        self.Price.setMaximum(10000000.0)
        self.Price.setSingleStep(1.0)
        self.Price.setProperty("value", 0.0)
        self.Price.setObjectName("Price")
        self.gridLayout_2.addWidget(self.Price, 2, 1, 1, 1)
        self.Stock = QtWidgets.QSpinBox(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Stock.sizePolicy().hasHeightForWidth())
        self.Stock.setSizePolicy(sizePolicy)
        self.Stock.setMinimumSize(QtCore.QSize(160, 25))
        self.Stock.setMaximumSize(QtCore.QSize(16777215, 31))
        font = QtGui.QFont()
        font.setFamily("SimSun")
        font.setPointSize(10)
        self.Stock.setFont(font)
        self.Stock.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.Stock.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"")
        self.Stock.setSuffix("")
        self.Stock.setPrefix("")
        self.Stock.setMaximum(10000000)
        self.Stock.setObjectName("Stock")
        self.gridLayout_2.addWidget(self.Stock, 3, 1, 1, 1)
        self.addproductbutton = QtWidgets.QPushButton(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.addproductbutton.sizePolicy().hasHeightForWidth())
        self.addproductbutton.setSizePolicy(sizePolicy)
        self.addproductbutton.setMinimumSize(QtCore.QSize(141, 25))
        self.addproductbutton.setMaximumSize(QtCore.QSize(141, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(11)
        self.addproductbutton.setFont(font)
        self.addproductbutton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.addproductbutton.setStyleSheet("background-color: rgb(208, 208, 208);")
        self.addproductbutton.setObjectName("addproductbutton")
        self.gridLayout_2.addWidget(self.addproductbutton, 4, 1, 1, 1)
        self.label_37 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_37.sizePolicy().hasHeightForWidth())
        self.label_37.setSizePolicy(sizePolicy)
        self.label_37.setMinimumSize(QtCore.QSize(111, 25))
        self.label_37.setMaximumSize(QtCore.QSize(150, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(12)
        self.label_37.setFont(font)
        self.label_37.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_37.setObjectName("label_37")
        self.gridLayout_2.addWidget(self.label_37, 3, 0, 1, 1)
        self.Productname = QtWidgets.QComboBox(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Productname.sizePolicy().hasHeightForWidth())
        self.Productname.setSizePolicy(sizePolicy)
        self.Productname.setMinimumSize(QtCore.QSize(160, 25))
        self.Productname.setMaximumSize(QtCore.QSize(16777215, 31))
        font = QtGui.QFont()
        font.setFamily("SimSun")
        font.setPointSize(10)
        self.Productname.setFont(font)
        self.Productname.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.Productname.setStyleSheet("background-color: rgb(229, 229, 229);")
        self.Productname.setEditable(True)
        self.Productname.setObjectName("Productname")
        self.gridLayout_2.addWidget(self.Productname, 1, 1, 1, 1)
        self.label_35 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_35.sizePolicy().hasHeightForWidth())
        self.label_35.setSizePolicy(sizePolicy)
        self.label_35.setMinimumSize(QtCore.QSize(111, 25))
        self.label_35.setMaximumSize(QtCore.QSize(150, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(12)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("color: rgb(255, 0, 0);\n"
"")
        self.label_35.setObjectName("label_35")
        self.gridLayout_2.addWidget(self.label_35, 1, 0, 1, 1)
        self.label_34 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_34.sizePolicy().hasHeightForWidth())
        self.label_34.setSizePolicy(sizePolicy)
        self.label_34.setMinimumSize(QtCore.QSize(91, 25))
        self.label_34.setMaximumSize(QtCore.QSize(150, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(14)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_34.setObjectName("label_34")
        self.gridLayout_2.addWidget(self.label_34, 0, 0, 1, 1)
        self.gridLayout_3.addWidget(self.frame_2, 4, 0, 1, 2)
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_4.sizePolicy().hasHeightForWidth())
        self.frame_4.setSizePolicy(sizePolicy)
        self.frame_4.setMinimumSize(QtCore.QSize(330, 150))
        self.frame_4.setMaximumSize(QtCore.QSize(500, 16777215))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.frame_4.setPalette(palette)
        self.frame_4.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setLineWidth(2)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_38 = QtWidgets.QLabel(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_38.sizePolicy().hasHeightForWidth())
        self.label_38.setSizePolicy(sizePolicy)
        self.label_38.setMinimumSize(QtCore.QSize(270, 29))
        self.label_38.setMaximumSize(QtCore.QSize(435, 71))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(14)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("color: rgb(206, 41, 8);")
        self.label_38.setObjectName("label_38")
        self.gridLayout_4.addWidget(self.label_38, 0, 0, 1, 3)
        self.cosellername = QtWidgets.QLineEdit(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cosellername.sizePolicy().hasHeightForWidth())
        self.cosellername.setSizePolicy(sizePolicy)
        self.cosellername.setMinimumSize(QtCore.QSize(270, 25))
        self.cosellername.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(10)
        self.cosellername.setFont(font)
        self.cosellername.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.cosellername.setText("")
        self.cosellername.setClearButtonEnabled(False)
        self.cosellername.setObjectName("cosellername")
        self.gridLayout_4.addWidget(self.cosellername, 1, 0, 1, 3)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 2, 0, 1, 1)
        self.registerbutton = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.registerbutton.sizePolicy().hasHeightForWidth())
        self.registerbutton.setSizePolicy(sizePolicy)
        self.registerbutton.setMinimumSize(QtCore.QSize(100, 25))
        self.registerbutton.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(11)
        self.registerbutton.setFont(font)
        self.registerbutton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.registerbutton.setStyleSheet("background-color: rgb(208, 208, 208);\n"
"")
        self.registerbutton.setObjectName("registerbutton")
        self.gridLayout_4.addWidget(self.registerbutton, 2, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem1, 2, 2, 1, 1)
        self.open_memberlist_6 = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_memberlist_6.sizePolicy().hasHeightForWidth())
        self.open_memberlist_6.setSizePolicy(sizePolicy)
        self.open_memberlist_6.setMinimumSize(QtCore.QSize(141, 25))
        self.open_memberlist_6.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(11)
        self.open_memberlist_6.setFont(font)
        self.open_memberlist_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.open_memberlist_6.setStyleSheet("background-color: rgb(208, 208, 208);")
        self.open_memberlist_6.setObjectName("open_memberlist_6")
        self.gridLayout_4.addWidget(self.open_memberlist_6, 3, 0, 1, 3)
        self.gridLayout_3.addWidget(self.frame_4, 5, 0, 1, 2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 6, 1, 1, 2)
        self.Logout = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Logout.sizePolicy().hasHeightForWidth())
        self.Logout.setSizePolicy(sizePolicy)
        self.Logout.setMinimumSize(QtCore.QSize(161, 31))
        self.Logout.setMaximumSize(QtCore.QSize(161, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Logout.setFont(font)
        self.Logout.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Logout.setStyleSheet("background-color: rgb(209, 209, 209);")
        self.Logout.setObjectName("Logout")
        self.gridLayout_3.addWidget(self.Logout, 6, 3, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(450, 40))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("\n"
"color: rgb(255, 0, 0);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 0, 2, 1, 2)
        OwnerScrn.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(OwnerScrn)
        self.statusbar.setObjectName("statusbar")
        OwnerScrn.setStatusBar(self.statusbar)

        self.retranslateUi(OwnerScrn)
        QtCore.QMetaObject.connectSlotsByName(OwnerScrn)
        
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.displayinventory)
        self.timer.start(1000*2)
        
        regexp = QtCore.QRegExp("[a-z-A-Z_.,- ]+")
        validator = QtGui.QRegExpValidator(regexp)
        self.cosellername.setValidator(validator)
        
        regexp2 = QtCore.QRegExp("[a-z-A-Z 0-9 _().+&]+")
        validator2 = QtGui.QRegExpValidator(regexp2)
        self.Productname.setValidator(validator2)
        
        self.OpenTransButton.clicked.connect(self.AccessHistory)
        self.open_memberlist_6.clicked.connect(self.AccessMember)
        self.registerbutton.clicked.connect(self.RegCoseller)
        self.addproductbutton.clicked.connect(self.Addproduct)
        self.addproductbutton.clicked.connect(self.regItemcombobox)
        self.Logout.clicked.connect(self.out)
        self.Logout.clicked.connect(Transactionwindow.hide)
        self.Logout.clicked.connect(Memberlist.hide)
        
        self.Inventory.cellDoubleClicked.connect(self.removeItem)

        self.regItemcombobox()
        self.displayinventory()

    def retranslateUi(self, OwnerScrn):
        _translate = QtCore.QCoreApplication.translate
        OwnerScrn.setWindowTitle(_translate("OwnerScrn", "Owner"))
        self.label_14.setText(_translate("OwnerScrn", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt;\">PERSONAL</span></p><p align=\"center\"><span style=\" font-size:16pt;\">COLLECTION </span></p><p align=\"center\"><span style=\" font-size:16pt;\">SALES SYSTEM</span></p></body></html>"))
        self.label.setText(_translate("OwnerScrn", "<html><head/><body><p><span style=\" font-weight:600; color:#ff0000;\">*Double Click Item to be Removed</span></p></body></html>"))
        self.Inventory.setSortingEnabled(True)
        item = self.Inventory.horizontalHeaderItem(0)
        item.setText(_translate("OwnerScrn", "Product Name"))
        self.Inventory.setColumnWidth( 0, 700 )
        item = self.Inventory.horizontalHeaderItem(1)
        item.setText(_translate("OwnerScrn", "Prices"))
        self.Inventory.setColumnWidth( 1, 300 )
        item = self.Inventory.horizontalHeaderItem(2)
        item.setText(_translate("OwnerScrn", "Available Stock"))
        self.Inventory.setColumnWidth( 2, 300 )
        item = self.Inventory.horizontalHeaderItem(3)
        item.setText(_translate("OwnerScrn","Number of Sold Items"))
        self.Inventory.setColumnWidth( 3, 300 ) 
        
        item = self.Inventory.horizontalHeaderItem(0)
        item.setText(_translate("OwnerScrn", "Product Name"))
        item = self.Inventory.horizontalHeaderItem(1)
        item.setText(_translate("OwnerScrn", "Prices"))
        item = self.Inventory.horizontalHeaderItem(2)
        item.setText(_translate("OwnerScrn", "Stock Quantity"))
        item = self.Inventory.horizontalHeaderItem(3)
        item.setText(_translate("OwnerScrn", "No. of Sold Items"))
        self.OpenTransButton.setText(_translate("OwnerScrn", "Open Transaction History"))
        self.label_36.setText(_translate("OwnerScrn", "Price:"))
        self.Price.setPrefix(_translate("OwnerScrn", "Php "))
        self.addproductbutton.setText(_translate("OwnerScrn", "Add Product"))
        self.label_37.setText(_translate("OwnerScrn", "Stock No.:"))
        self.label_35.setText(_translate("OwnerScrn", "Product Name:"))
        self.label_34.setText(_translate("OwnerScrn", "New Items"))
        self.label_38.setText(_translate("OwnerScrn", "<html><head/><body><p align=\"center\">Register Customer for Membership</p></body></html>"))
        self.cosellername.setPlaceholderText(_translate("OwnerScrn", "First name Surname"))
        self.registerbutton.setText(_translate("OwnerScrn", "Register"))
        self.open_memberlist_6.setText(_translate("OwnerScrn", "Open Member List"))
        self.Logout.setText(_translate("OwnerScrn", "Log out"))
        self.label_2.setToolTip(_translate("OwnerScrn", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label_2.setText(_translate("OwnerScrn", "<html><head/><body><p align=\"center\">           INVENTORY</p></body></html>"))

#Open Member List
    def AccessMember(self):
        Memberlist.show()

#Display Items
    def displayinventory(self):
        
        try:
            try:   
                self.con = mysql.connector.connect(user="root", host="localhost", password="pass", database="pcsssys")
                self.cursor = self.con.cursor()

                self.cursor.execute("SELECT Product_Name, Product_price, Available_Stock, Stock_sold FROM inventory ORDER BY Available_Stock")
                self.result5 = self.cursor.fetchall()
            
            except mysql.connector.Error as err:
                    print("Error")
            
            self.numcolumns = len(self.result5[0])
            self.numrows = len(self.result5)
            
            self.Inventory.setColumnCount(self.numcolumns)
            self.Inventory.setRowCount(self.numrows)
            
            for row in range(self.numrows):
                for column in range(self.numcolumns):
                    if isinstance(self.result5[row][column],int):
                        self.Inventory.setItem(row,column,QTableWidgetItem(str(self.result5[row][column])))
                        
                    elif isinstance(self.result5[row][column],float):
                        self.Inventory.setItem(row,column,QTableWidgetItem(str(self.result5[row][column])))
                        
                    else:
                        self.Inventory.setItem(row,column,QTableWidgetItem((self.result5[row][column])))
                        
        except:
            self.Inventory.clearContents()
            self.Inventory.setRowCount(0)
                

    def message(self):
        mg1 = QMessageBox()
        mg1.setWindowTitle("New Member Confirmed")
        mg1.setText("New Member added in the List ")
        mg1.setIcon(QMessageBox.Information)
        mg1.setStandardButtons(QMessageBox.Ok)
        mg1.exec()
     
#Register New Customer
    def RegCoseller(self):
        name2 = len(self.cosellername.text()) > 0
        
        if name2 == True:
            confirm2 = QMessageBox()
            confirm2.setWindowTitle("Confirm Member")
            confirm2.setText("Add new Member name in the Member List?")
            confirm2.setIcon(QMessageBox.Question)
            confirm2.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            add = confirm2.exec()

            if add == QMessageBox.Yes:
            
                try:
                    self.con= mysql.connector.connect(user='root', host='localhost',password='pass',database='pcsssys')
                    self.cursor=self.con.cursor()

                    insertdata = ("INSERT INTO memberlist""(membername)""VALUES(%(membername)s)")
                    data = {
                        'membername':self.cosellername.text()
                        }

                    self.cursor.execute(insertdata,data)
                    self.con.commit()

                    self.cosellername.clear()
                    self.message()
            
                except mysql.connector.Error as err:
                    mg1 = QMessageBox()
                    mg1.setWindowTitle("Duplicate")
                    mg1.setText(" Name already exist ")
                    mg1.setIcon(QMessageBox.Information)
                    mg1.setStandardButtons(QMessageBox.Ok)
                    mg1.exec_()
            
            else:
                mg1 = QMessageBox()
                mg1.setWindowTitle("Not Confirmed")
                mg1.setText("Name of Customer not Added in the List ")
                mg1.setIcon(QMessageBox.Information)
                mg1.setStandardButtons(QMessageBox.Ok)
                mg1.exec()

                self.cosellername.clear()
                
        else:
            QMessageBox.warning(self,"Warning","Missing Entry!\n"
                                "Please Enter Name of Customer to be listed in the Member List")

# Access Transaction History
    def AccessHistory(self):
        Transactionwindow.show()

 
    def messagesuccessadd(self):
        msg = QMessageBox()
        msg.setWindowTitle("Success Add")
        msg.setText("Product Added in the Inventory")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()
        
    def messagesuccessupdate(self):
        msg = QMessageBox()
        msg.setWindowTitle("Updated")
        msg.setText("Product Updated in the Inventory")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

#Add New Product
    def Addproduct(self):
        entry = len(self.Productname.currentText()) > 0 and len(self.Price.text()) > 0 and len(self.Stock.text()) > 0


        if entry is True:
            msg2 = QMessageBox()
            msg2.setWindowTitle("Add New Product/ Update")
            msg2.setText("Product be added to the Inventory?")
            msg2.setIcon(QMessageBox.Question)
            msg2.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            reply = msg2.exec_()

            if reply == QMessageBox.Yes:

                newpro = self.Productname.currentText()
            
            
                self.conn = mysql.connector.connect(user="root", host="localhost", password="pass", database="pcsssys")
                self.cur = self.conn.cursor()

                check = "SELECT Product_Name FROM inventory WHERE Product_Name LIKE'" + newpro+"'"
                self.cur.execute(check)
                self.result3 = self.cur.fetchone()

                if self.result3 ==None:

                    data_insert = ("INSERT INTO inventory""(Product_Name, Product_price, Available_Stock)"" VALUES(%(Product_Name)s, %(Product_price)s, %(Available_Stock)s)")
                    data_product = {
                        'Product_Name': self.Productname.currentText(),
                        'Product_price': self.Price.value(),'Available_Stock': self.Stock.value()
                        }
                    self.cur.execute(data_insert,data_product)
                    self.conn.commit()
                
                
                    self.Productname.clearEditText()
                    self.Price.clear()
                    self.Stock.clear()
                    self.Productname.clear()
                    
                    self.displayinventory()
                    self.regItemcombobox()
                    
                    self.con.close()
                                
                    self.messagesuccessadd()

                else:
                    
                    avail_stock = "SELECT Available_Stock FROM inventory WHERE Product_Name LIKE'" + newpro + "'"
                    self.cur.execute(avail_stock)
                    self.got = self.cur.fetchone()[0]
                    
                    updatestock = self.Stock.value()
                    stock = self.got
                    add =stock + updatestock
                    
                    update = "UPDATE inventory SET Available_Stock = %s  WHERE Product_Name = %s"
                    val = (add, newpro)
                    self.cur.execute(update, val)
                    self.conn.commit()
                    
                    self.displayinventory()
                    self.Productname.clearEditText()
                    self.Price.clear()
                    self.Stock.clear()
                    
                    
                    self.messagesuccessupdate()
                    
                

            else:
                msg = QMessageBox()
                msg.setWindowTitle("Cancelled")
                msg.setText("Product not added to Inventory")
                msg.setIcon(QMessageBox.Information)
                msg.setStandardButtons(QMessageBox.Ok)
                msg.exec_()

                self.Productname.clearEditText()
                self.Price.clear()
                self.Stock.clear()
        else:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Missing Entry")
            msg1.setText(
                "   Product Name is Missing \n   Please ensure the Product Price and Stock number is also change ")
            msg1.setIcon(QMessageBox.Warning)
            msg1.setStandardButtons(QMessageBox.Ok)
            msg1.exec_()

#Display in Combobox
    def regItemcombobox(self):
        try:
            try:
                self.Productname.clear()
                
                self.con = mysql.connector.connect(user="root", host="localhost", password="pass", database="pcsssys")
                self.mycursor = self.con.cursor()

                self.mycursor.execute("SELECT DISTINCT Product_Name FROM inventory ")
                self.result2 = self.mycursor.fetchall()
                
            except mysql.connector.Error as err:
                self.errorDisplay(err.errno, err.sqlstate, err.msg)
        
            self.Productname.addItems(item[0] for item in self.result2)
            
        except:
            pass
            
        
    def errorDisplay(self,errorCode, sqlState,text):
        error1 = "Error Code:"+str(errorCode)
        error2 = "SQL State" + sqlState
        error3 = "Description" +text
        QMessageBox.critical(self, "Error", error1 +error2+ error3)
        
    def removeItem(self):
        
        mes3 = QMessageBox()
        mes3.setWindowTitle("Remove Item")
        mes3.setText("Remove Item in the Inventory?")
        mes3.setIcon(QMessageBox.Question)
        mes3.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        answer = mes3.exec_()
                
        if answer == QMessageBox.Yes:
        
            currentRow3 = self.Inventory.currentRow()
            product_del = self.Inventory.item(currentRow3, 0)
            product_inv = product_del.text()
            
            try:
                self.Productname.clear()
                
                self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
                self.cursor = self.con.cursor()
            
                self.cursor.execute("DELETE FROM inventory WHERE Product_Name = '"+product_inv+"'")
            
                self.con.commit()
                self.regItemcombobox()
            except:
                pass
        else:
            QMessageBox.information(self, "Cancelled","Item not Removed in the Inventory")  
  
        
#Log oUt
    def out(self):
        msg7 = QMessageBox()
        msg7.setWindowTitle("Logging out")
        msg7.setText("Are you sure to Log out?")
        msg7.setIcon(QMessageBox.Question)
        msg7.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        reply3 = msg7.exec_()

        if reply3 == QMessageBox.Yes:
            OwnerScrn.hide()
            StartUp.show()

        else:
            pass

    def closeEvent(self, event):
        close4 = QMessageBox()
        close4.setWindowTitle("Close Owner Window")
        close4.setText("Are You sure to Close Inventory?")
        close4.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        Done3 = close4.exec()

        if Done3 == QMessageBox.Yes:
            event.accept()
            Transactionwindow.hide()
            Memberlist.hide()
            StartUp.show()

        else:
            event.ignore()

#MemberList Module
class Ui_Memberlist(QtWidgets.QMainWindow):
    def setupUi(self, Memberlist):
        Memberlist.setObjectName("Memberlist")
        Memberlist.resize(587, 761)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Memberlist.sizePolicy().hasHeightForWidth())
        Memberlist.setSizePolicy(sizePolicy)
        Memberlist.setMinimumSize(QtCore.QSize(500, 550))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        Memberlist.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ListIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Memberlist.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(Memberlist)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(471, 34))
        self.label.setMaximumSize(QtCore.QSize(16777215, 45))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("PanRoman")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(471, 45))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 45))
        font = QtGui.QFont()
        font.setFamily("PanRoman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 2)
        self.MembersList = QtWidgets.QListWidget(self.centralwidget)
        self.MembersList.setMinimumSize(QtCore.QSize(481, 321))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MembersList.setFont(font)
        self.MembersList.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 127);")
        self.MembersList.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.MembersList.setAlternatingRowColors(True)
        self.MembersList.setObjectName("MembersList")
        self.gridLayout.addWidget(self.MembersList, 2, 0, 1, 2)
        Memberlist.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Memberlist)
        self.statusbar.setObjectName("statusbar")
        Memberlist.setStatusBar(self.statusbar)

        self.retranslateUi(Memberlist)
        QtCore.QMetaObject.connectSlotsByName(Memberlist)
        
        self.timer5 = QtCore.QTimer()
        self.timer5.timeout.connect(self.refreshlist)
        self.timer5.start(1000*2)
        
        self.displaymember()
    
    def retranslateUi(self, Memberlist):
        _translate = QtCore.QCoreApplication.translate
        Memberlist.setWindowTitle(_translate("Memberlist", "Listofmembers"))
        self.label.setText(_translate("Memberlist", "Member List"))
        self.label_2.setText(_translate("Memberlist", "Names of Customers"))

#Display Member
    def displaymember(self):

        self.con = mysql.connector.connect(user='root', host='localhost', password='pass', database='pcsssys')
        self.cursor = self.con.cursor()

        self.cursor.execute("SELECT DISTINCT membername FROM memberlist ")
        self.result4 = self.cursor.fetchall()
        self.con.commit()
            
        for item in self.result4:
            self.MembersList.addItems(item)
    
    def refreshlist(self):
        self.MembersList.clear()
        
        self.con = mysql.connector.connect(user='root', host='localhost', password='pass', database='pcsssys')
        self.cursor = self.con.cursor()

        self.cursor.execute("SELECT DISTINCT membername FROM memberlist ")
        self.result9 = self.cursor.fetchall()
        self.con.commit()
            
        for item in self.result9:
            self.MembersList.addItems(item)
        

    def closeEvent(self, event):
        close = QMessageBox()
        close.setWindowTitle("Close Window")
        close.setText("Done Checking the Members List?")
        close.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        Done2 = close.exec()

        if Done2 == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()
            

#Customer Module/Screen
class Ui_CustomerScrn(QtWidgets.QMainWindow):
    def setupUi(self, CustomerScrn):
        CustomerScrn.setObjectName("CustomerScrn")
        CustomerScrn.resize(992, 753)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(CustomerScrn.sizePolicy().hasHeightForWidth())
        CustomerScrn.setSizePolicy(sizePolicy)
        CustomerScrn.setMinimumSize(QtCore.QSize(800, 580))
        font = QtGui.QFont()
        font.setPointSize(10)
        CustomerScrn.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("CustomerIcon.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        CustomerScrn.setWindowIcon(icon)
        CustomerScrn.setToolTipDuration(3)
        CustomerScrn.setStyleSheet("background-color: rgb(255, 255, 0);")
        CustomerScrn.setToolButtonStyle(QtCore.Qt.ToolButtonFollowStyle)
        self.centralwidget = QtWidgets.QWidget(CustomerScrn)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setMinimumSize(QtCore.QSize(230, 20))
        self.label_11.setMaximumSize(QtCore.QSize(430, 20))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 2, 2, 1, 1)
        self.SelectedItems = QtWidgets.QTableWidget(self.centralwidget)
        self.SelectedItems.setMinimumSize(QtCore.QSize(250, 180))
        self.SelectedItems.setMaximumSize(QtCore.QSize(450, 400))
        self.SelectedItems.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.SelectedItems.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.SelectedItems.setDragDropOverwriteMode(False)
        self.SelectedItems.setDragDropMode(QtWidgets.QAbstractItemView.DropOnly)
        self.SelectedItems.setAlternatingRowColors(True)
        self.SelectedItems.setRowCount(0)
        self.SelectedItems.setObjectName("SelectedItems")
        self.SelectedItems.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.SelectedItems.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SelectedItems.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SelectedItems.setHorizontalHeaderItem(2, item)
        self.SelectedItems.horizontalHeader().setCascadingSectionResizes(True)
        self.SelectedItems.horizontalHeader().setDefaultSectionSize(125)
        self.SelectedItems.verticalHeader().setDefaultSectionSize(38)
        self.gridLayout_2.addWidget(self.SelectedItems, 3, 2, 1, 1)
        self.calculatebutton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.calculatebutton.sizePolicy().hasHeightForWidth())
        self.calculatebutton.setSizePolicy(sizePolicy)
        self.calculatebutton.setMinimumSize(QtCore.QSize(95, 20))
        self.calculatebutton.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(12)
        self.calculatebutton.setFont(font)
        self.calculatebutton.setStyleSheet("background-color: rgb(207, 205, 218);")
        self.calculatebutton.setObjectName("calculatebutton")
        self.gridLayout_2.addWidget(self.calculatebutton, 4, 2, 1, 1)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setMinimumSize(QtCore.QSize(240, 230))
        self.frame_2.setMaximumSize(QtCore.QSize(350, 16777215))
        self.frame_2.setStyleSheet("\n"
"background-color: rgb(255, 255, 0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMinimumSize(QtCore.QSize(100, 20))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_3.addWidget(self.label_6, 0, 0, 1, 2)
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setMinimumSize(QtCore.QSize(100, 50))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.gridLayout_3.addWidget(self.label_10, 1, 0, 1, 3)
        self.checkname = QtWidgets.QLineEdit(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkname.sizePolicy().hasHeightForWidth())
        self.checkname.setSizePolicy(sizePolicy)
        self.checkname.setMinimumSize(QtCore.QSize(100, 20))
        self.checkname.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(12)
        self.checkname.setFont(font)
        self.checkname.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.checkname.setObjectName("checkname")
        self.gridLayout_3.addWidget(self.checkname, 2, 0, 1, 3)
        spacerItem = QtWidgets.QSpacerItem(73, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 3, 0, 1, 1)
        self.searchname = QtWidgets.QPushButton(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(12)
        self.searchname.setFont(font)
        self.searchname.setStyleSheet("background-color: rgb(214, 214, 214);")
        self.searchname.setObjectName("searchname")
        self.gridLayout_3.addWidget(self.searchname, 3, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(73, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 3, 2, 1, 1)
        self.label_10.raise_()
        self.checkname.raise_()
        self.label_6.raise_()
        self.searchname.raise_()
        self.gridLayout_2.addWidget(self.frame_2, 4, 0, 2, 1)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(250, 160))
        self.frame.setMaximumSize(QtCore.QSize(450, 380))
        self.frame.setStyleSheet("border-color: rgb(18, 18, 18);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(70, 20))
        self.label_2.setMaximumSize(QtCore.QSize(70, 35))
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 2)
        self.TotalPrice = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TotalPrice.sizePolicy().hasHeightForWidth())
        self.TotalPrice.setSizePolicy(sizePolicy)
        self.TotalPrice.setMinimumSize(QtCore.QSize(130, 20))
        self.TotalPrice.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TotalPrice.setFont(font)
        self.TotalPrice.setFrameShape(QtWidgets.QFrame.Panel)
        self.TotalPrice.setFrameShadow(QtWidgets.QFrame.Plain)
        self.TotalPrice.setLineWidth(1)
        self.TotalPrice.setText("")
        self.TotalPrice.setObjectName("TotalPrice")
        self.gridLayout.addWidget(self.TotalPrice, 0, 2, 1, 3)
        self.label_7 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setMinimumSize(QtCore.QSize(70, 20))
        self.label_7.setMaximumSize(QtCore.QSize(70, 35))
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 1, 0, 1, 2)
        self.Discountedprice = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Discountedprice.sizePolicy().hasHeightForWidth())
        self.Discountedprice.setSizePolicy(sizePolicy)
        self.Discountedprice.setMinimumSize(QtCore.QSize(130, 18))
        self.Discountedprice.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Discountedprice.setFont(font)
        self.Discountedprice.setFrameShape(QtWidgets.QFrame.Panel)
        self.Discountedprice.setText("")
        self.Discountedprice.setObjectName("Discountedprice")
        self.gridLayout.addWidget(self.Discountedprice, 1, 2, 1, 3)
        self.label_9 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setMinimumSize(QtCore.QSize(70, 20))
        self.label_9.setMaximumSize(QtCore.QSize(70, 35))
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 2, 0, 1, 2)
        self.Gtotal = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Gtotal.sizePolicy().hasHeightForWidth())
        self.Gtotal.setSizePolicy(sizePolicy)
        self.Gtotal.setMinimumSize(QtCore.QSize(130, 20))
        self.Gtotal.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Gtotal.setFont(font)
        self.Gtotal.setFrameShape(QtWidgets.QFrame.Panel)
        self.Gtotal.setText("")
        self.Gtotal.setObjectName("Gtotal")
        self.gridLayout.addWidget(self.Gtotal, 2, 2, 1, 3)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setMinimumSize(QtCore.QSize(60, 20))
        self.label.setMaximumSize(QtCore.QSize(65, 35))
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 3, 0, 1, 1)
        self.CashBox = QtWidgets.QDoubleSpinBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CashBox.sizePolicy().hasHeightForWidth())
        self.CashBox.setSizePolicy(sizePolicy)
        self.CashBox.setMinimumSize(QtCore.QSize(100, 20))
        self.CashBox.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.CashBox.setFont(font)
        self.CashBox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.CashBox.setMaximum(100000000.0)
        self.CashBox.setSingleStep(0.25)
        self.CashBox.setObjectName("CashBox")
        self.gridLayout.addWidget(self.CashBox, 3, 1, 1, 3)
        self.cashbutton = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cashbutton.sizePolicy().hasHeightForWidth())
        self.cashbutton.setSizePolicy(sizePolicy)
        self.cashbutton.setMinimumSize(QtCore.QSize(65, 25))
        self.cashbutton.setMaximumSize(QtCore.QSize(95, 31))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(11)
        self.cashbutton.setFont(font)
        self.cashbutton.setStyleSheet("background-color: rgb(231, 231, 231);")
        self.cashbutton.setObjectName("cashbutton")
        self.gridLayout.addWidget(self.cashbutton, 3, 4, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 4, 1, 1, 2)
        self.Change = QtWidgets.QLabel(self.frame)
        self.Change.setMinimumSize(QtCore.QSize(70, 20))
        self.Change.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Change.setFont(font)
        self.Change.setFrameShape(QtWidgets.QFrame.Panel)
        self.Change.setText("")
        self.Change.setObjectName("Change")
        self.gridLayout.addWidget(self.Change, 4, 3, 1, 2)
        self.Print = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Print.sizePolicy().hasHeightForWidth())
        self.Print.setSizePolicy(sizePolicy)
        self.Print.setMinimumSize(QtCore.QSize(65, 25))
        self.Print.setMaximumSize(QtCore.QSize(95, 31))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(12)
        self.Print.setFont(font)
        self.Print.setStyleSheet("background-color: rgb(203, 203, 203);")
        self.Print.setCheckable(False)
        self.Print.setObjectName("Print")
        self.gridLayout.addWidget(self.Print, 5, 4, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 5, 2, 1, 1)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setMinimumSize(QtCore.QSize(240, 180))
        self.frame_3.setMaximumSize(QtCore.QSize(350, 190))
        self.frame_3.setStyleSheet("\n"
"background-color: rgb(255, 255, 0);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_8 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout.addWidget(self.label_8)
        self.gridLayout_2.addWidget(self.frame_3, 2, 0, 2, 1)
        self.OrderItems = QtWidgets.QTableWidget(self.centralwidget)
        self.OrderItems.setMinimumSize(QtCore.QSize(280, 440))
        self.OrderItems.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.OrderItems.setMouseTracking(False)
        self.OrderItems.setStyleSheet("\n"
"alternate-background-color: rgb(255, 255, 127);\n"
"background-color: rgb(255, 255, 255);")
        self.OrderItems.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.OrderItems.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.OrderItems.setTabKeyNavigation(False)
        self.OrderItems.setProperty("showDropIndicator", False)
        self.OrderItems.setDragDropOverwriteMode(False)
        self.OrderItems.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)
        self.OrderItems.setAlternatingRowColors(True)
        self.OrderItems.setRowCount(0)
        self.OrderItems.setObjectName("OrderItems")
        self.OrderItems.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        item.setFont(font)
        self.OrderItems.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderItems.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderItems.setHorizontalHeaderItem(2, item)
        self.OrderItems.horizontalHeader().setDefaultSectionSize(124)
        self.OrderItems.horizontalHeader().setMinimumSectionSize(88)
        self.OrderItems.horizontalHeader().setStretchLastSection(False)
        self.OrderItems.verticalHeader().setVisible(False)
        self.OrderItems.verticalHeader().setDefaultSectionSize(60)
        self.OrderItems.verticalHeader().setHighlightSections(False)
        self.OrderItems.verticalHeader().setMinimumSectionSize(60)
        self.OrderItems.verticalHeader().setSortIndicatorShown(False)
        self.gridLayout_2.addWidget(self.OrderItems, 2, 1, 4, 1)
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setMinimumSize(QtCore.QSize(250, 20))
        self.label_12.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.gridLayout_2.addWidget(self.label_12, 1, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(781, 60))
        self.label_4.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Pristina")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 0, 1, 3)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setMinimumSize(QtCore.QSize(230, 25))
        self.label_5.setMaximumSize(QtCore.QSize(420, 33))
        font = QtGui.QFont()
        font.setFamily("MS Gothic")
        font.setPointSize(18)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 1, 2, 1, 1)
        CustomerScrn.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(CustomerScrn)
        self.statusbar.setObjectName("statusbar")
        CustomerScrn.setStatusBar(self.statusbar)

        self.retranslateUi(CustomerScrn)
        QtCore.QMetaObject.connectSlotsByName(CustomerScrn)
        
        self.timer2 = QtCore.QTimer()
        self.timer2.timeout.connect(self.displaystock)
        self.timer2.timeout.connect(self.displaycart)
        self.timer2.start(1000*2)
        
        self.displaystock()

        self.Print.clicked.connect(self.resetcus)
        self.calculatebutton.clicked.connect(self.gtotal)
        self.searchname.clicked.connect(self.find)
        self.cashbutton.clicked.connect(self.cassshy)

        self.OrderItems.cellDoubleClicked.connect(self.selectItem)
        self.SelectedItems.cellDoubleClicked.connect(self.removeorder)
        

        regex = QtCore.QRegExp("[a-z-A-Z_. ]+")
        validate = QtGui.QRegExpValidator(regex)
        self.checkname.setValidator(validate)
        
        self.calculatebutton.setEnabled(False)
    
        self.cashbutton.setEnabled(False)
    

    def retranslateUi(self, CustomerScrn):
        _translate = QtCore.QCoreApplication.translate
        CustomerScrn.setWindowTitle(_translate("CustomerScrn", "Hello Customer"))
        self.label_11.setText(_translate("CustomerScrn", "<html><head/><body><p>*Double click to Removed Item in the cart*</p></body></html>"))
        item = self.SelectedItems.horizontalHeaderItem(0)
        self.SelectedItems.setColumnWidth( 0, 200 )
        item.setText(_translate("CustomerScrn", "Product Name"))
        item = self.SelectedItems.horizontalHeaderItem(1)
        self.SelectedItems.setColumnWidth( 1, 100 )
        item.setText(_translate("CustomerScrn", "Price"))
        item = self.SelectedItems.horizontalHeaderItem(2)
        self.SelectedItems.setColumnWidth( 2, 100 )
        item.setText(_translate("CustomerScrn", "Quantity"))
        self.calculatebutton.setText(_translate("CustomerScrn", "Get Total"))
        self.label_6.setText(_translate("CustomerScrn", "Hello there!!"))
        self.label_10.setText(_translate("CustomerScrn", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">Customer Please </span></p><p align=\"center\"><span style=\" font-size:11pt;\">Input Your Name </span></p></body></html>"))
        self.checkname.setPlaceholderText(_translate("CustomerScrn", "First name Surname"))
        self.searchname.setText(_translate("CustomerScrn", "Input"))
        self.label_2.setText(_translate("CustomerScrn", "Total:"))
        self.label_7.setText(_translate("CustomerScrn", "Discount:"))
        self.label_9.setText(_translate("CustomerScrn", "Grand Total:"))
        self.label.setText(_translate("CustomerScrn", "Cash:"))
        self.CashBox.setPrefix(_translate("CustomerScrn", "Php "))
        self.cashbutton.setText(_translate("CustomerScrn", "Enter"))
        self.label_3.setText(_translate("CustomerScrn", "Change:"))
        self.Print.setText(_translate("CustomerScrn", "Reset"))
        self.label_8.setText(_translate("CustomerScrn", "<html><head/><body><p align=\"center\"><br/>Be a Co-seller to have a</p><p align=\"center\">15 % discount!</p></body></html>"))
        item = self.OrderItems.horizontalHeaderItem(0)
        self.OrderItems.setColumnWidth( 0, 510 )
        item.setText(_translate("CustomerScrn", "Product Name"))
        item = self.OrderItems.horizontalHeaderItem(1)
        self.OrderItems.setColumnWidth( 1, 360 )
        item.setText(_translate("CustomerScrn", "Product Price"))
        item = self.OrderItems.horizontalHeaderItem(2)
        self.OrderItems.setColumnWidth( 2, 350 )
        item.setText(_translate("CustomerScrn", "Stock"))
        self.label_12.setText(_translate("CustomerScrn", "<html><head/><body><p>*Double click to Add Item in the cart/selected table*</p></body></html>"))
        self.label_4.setText(_translate("CustomerScrn", "Welcome To Personal Collection"))
        self.label_5.setText(_translate("CustomerScrn", "Selected Products"))



#Display from Inventory
    def displaystock(self):
        try:
            try:
                self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
                self.cursor = self.con.cursor()
        
                self.cursor.execute("SELECT Product_Name , Product_price, Available_Stock FROM inventory WHERE NOT Available_Stock ='0' ORDER BY Product_Name")
                self.result6 = self.cursor.fetchall()
               
                
            except mysql.connector.Error as err:
                
                print("Error")
        
            self.numcolumns = len(self.result6[0])
            self.numrows = len(self.result6) 
        
            self.OrderItems.setColumnCount(self.numcolumns)
            self.OrderItems.setRowCount(self.numrows)
        
            for row in range(self.numrows):
                for column in range(self.numcolumns):
                    if isinstance(self.result6[row][column],int):
                        self.OrderItems.setItem(row,column,QTableWidgetItem(str(self.result6[row][column])))
                    
                    elif isinstance(self.result6[row][column],float):
                        self.OrderItems.setItem(row,column,QTableWidgetItem(str(self.result6[row][column])))
                    
                    else:
                        self.OrderItems.setItem(row,column,QTableWidgetItem((self.result6[row][column])))
                        
                    
        except:
            self.OrderItems.clearContents()
            self.OrderItems.setRowCount(0)
                    
#Display Selected
    def displaycart(self):
        try:
            try:
                self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
                self.cursor = self.con.cursor()
        
                self.cursor.execute("SELECT Product_Name,Subtotal_price,Quantity FROM order_table")
                self.result8 = self.cursor.fetchall()
                
            except mysql.connector.Error as err:
                print("Error")
        
            self.numcolumns = len(self.result8[0])
            self.numrows = len(self.result8)
        
            self.SelectedItems.setColumnCount(self.numcolumns)
            self.SelectedItems.setRowCount(self.numrows)
        
            for row in range(self.numrows):
                for column in range(self.numcolumns):
                    if isinstance(self.result8[row][column],int):
                        self.SelectedItems.setItem(row,column,QTableWidgetItem(str(self.result8[row][column])))
                    
                    elif isinstance(self.result8[row][column],float):
                        self.SelectedItems.setItem(row,column,QTableWidgetItem(str(self.result8[row][column])))
                    
                    else:
                        self.SelectedItems.setItem(row,column,QTableWidgetItem((self.result8[row][column])))
                        
                        
        except:
            self.SelectedItems.clearContents()
            self.SelectedItems.setRowCount(0)
                                
            
#Select Item 
    def selectItem(self):
        currentRow = self.OrderItems.currentRow()
        product = self.OrderItems.item(currentRow, 0)
        orderitem = product.text()
        
        mes = QMessageBox()
        mes.setWindowTitle("Order Message")
        mes.setText("Buy this Item?")
        mes.setIcon(QMessageBox.Question)
        mes.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        ans = mes.exec_()
                
        if ans == QMessageBox.Yes:
            
            self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
            self.cursor = self.con.cursor()
            
            self.cursor.execute("SELECT Product_Name FROM order_table WHERE Product_Name ='"+orderitem+"'")
            itemcheck = self.cursor.fetchone()
     
            
            self.cursor.execute("SELECT Available_Stock FROM inventory WHERE Product_Name ='"+orderitem+"'")
            getstock = self.cursor.fetchone()[0]
            
            if itemcheck ==None:
            
                self.intValue, self.buttonState = QInputDialog.getInt(self,"Enter Quantity", "Input Value of how many items to be order", 1, 1,1000,1) 
                if self.buttonState:
                    if self.intValue <= getstock:
                        self.cursor.execute("SELECT Stock_sold FROM inventory WHERE Product_Name ='"+orderitem+"'")
                        getsold = self.cursor.fetchone()[0]
                        
                        soldstock = getsold + self.intValue
                        leftstock =  getstock - self.intValue
                
                   
                        updateleft = "UPDATE inventory SET Available_Stock = %s  WHERE Product_Name = %s"
                        values = (leftstock, orderitem)
                        self.cursor.execute(updateleft, values)
                        
                        updatesold = "UPDATE inventory SET Stock_sold = %s  WHERE Product_Name = %s"
                        values2 = (soldstock, orderitem)
                        self.cursor.execute(updatesold, values2)
                        
                        self.cursor.execute("SELECT Product_price FROM inventory WHERE Product_Name ='"+orderitem+"'")
                        getprice = self.cursor.fetchone()[0]
                        
                        subtotal_price = getprice * self.intValue
                
                        cart = "INSERT INTO order_table (Product_Name,Subtotal_price,Quantity)"" VALUES(%s, %s,%s) "
                        cart_data = (orderitem,subtotal_price, self.intValue )
                        self.cursor.execute(cart, cart_data)
                        self.con.commit()
                    
                        self.displaystock()
                        self.displaycart()
                    
                    
                    
                    else:
                        limit = QMessageBox()
                        limit.setWindowTitle("Product Stock Limit exceeded")
                        limit.setText("You have reached the Maximum number of this Product\n"
                        "Please enter again the Quantity of Order")
                        limit.setIcon(QMessageBox.Warning)
                        limit.setStandardButtons(QMessageBox.Ok)
                        limit.exec_()
                else:
                    pass
            else:
                mess = QMessageBox()
                mess.setWindowTitle("Order Message")
                mess.setText("This Item Already in the Selected Table\n "
                    "Stll buy this product to add to your Selected Table?")
                mess.setIcon(QMessageBox.Question)
                mess.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                ans2 = mess.exec_()
                
                if ans2 ==QMessageBox.Yes:
                    
                    self.intValue2, self.buttonState = QInputDialog.getInt(self,"Enter Quantity", "Input Value of how many items to be Added in your order", 1, 1,1000,1) 
                    if self.buttonState:
                        if self.intValue2 <= getstock:
                        
                            self.cursor.execute("SELECT Quantity FROM order_table WHERE Product_Name ='"+orderitem+"'")
                            item_addupdate = self.cursor.fetchone()[0]
                        
                            self.cursor.execute("SELECT Product_price FROM inventory WHERE Product_Name ='"+orderitem+"'")
                            getprice = self.cursor.fetchone()[0]
                        
                            self.cursor.execute("SELECT Subtotal_price FROM order_table WHERE Product_Name ='"+orderitem+"'")
                            subprice_add= self.cursor.fetchone()[0]
                        
                            add_quantity = item_addupdate + self.intValue2
                            price_get = subprice_add + (self.intValue2 * getprice)
                            leftstock =  getstock - self.intValue2
                        
                            updateleft = "UPDATE inventory SET Available_Stock = %s  WHERE Product_Name = %s"
                            values = (leftstock, orderitem)
                            self.cursor.execute(updateleft, values)
                        
                            update_quantity = "UPDATE order_table SET Quantity = %s  WHERE Product_Name = %s"
                            values2 = (add_quantity, orderitem)
                            self.cursor.execute(update_quantity , values2)
                        
                            updatesub_price = "UPDATE order_table SET Subtotal_price = %s  WHERE Product_Name = %s"
                            values3 = (price_get, orderitem)
                            self.cursor.execute(updatesub_price, values3)
                        
                            self.con.commit()
                        
                            self.displaystock()
                            self.displaycart()
                        
                        else:
                            limit = QMessageBox()
                            limit.setWindowTitle("Product Stock Limit exceeded")
                            limit.setText("You have reached the Maximum number of this Product\n"
                            "Please enter again the Quantity of Order")
                            limit.setIcon(QMessageBox.Warning)
                            limit.setStandardButtons(QMessageBox.Ok)
                            limit.exec_()
                    else:
                        pass
                        
                else:
                    pass   
                    
        else:
            pass
        
    def removeorder(self):
        
        mes3 = QMessageBox()
        mes3.setWindowTitle("Order Message")
        mes3.setText("Remove Order Item?")
        mes3.setIcon(QMessageBox.Question)
        mes3.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        answer = mes3.exec_()
                
        if answer == QMessageBox.Yes:
        
            currentRow2 = self.SelectedItems.currentRow()
            print(currentRow2)
            orderdel = self.SelectedItems.item(currentRow2, 0)
            orderitem2 = orderdel.text()
            try:
                
                self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
                self.cursor = self.con.cursor()
            
                self.cursor.execute("SELECT Quantity FROM order_table WHERE Product_Name ='"+orderitem2+"'")
                back = self.cursor.fetchone()[0]
            
                self.cursor.execute("SELECT Available_Stock FROM inventory WHERE Product_Name ='"+orderitem2+"'")
                stockorig = self.cursor.fetchone()[0]
                
                self.cursor.execute("SELECT Stock_sold FROM inventory WHERE Product_Name = '"+orderitem2+"'")
                soldcancel = self.cursor.fetchone()[0]
            
                backstock = stockorig + back
                cancel_sold = soldcancel - back
            
                backitems = "UPDATE inventory SET Available_Stock = %s  WHERE Product_Name = %s"
                values4 = (backstock, orderitem2)
                self.cursor.execute(backitems, values4)
                
                solddel = "UPDATE inventory SET Stock_sold = %s  WHERE Product_Name = %s"
                values5 = (cancel_sold, orderitem2)
                self.cursor.execute(solddel, values5)
        
                self.cursor.execute("DELETE FROM order_table WHERE Product_Name = '"+orderitem2+"'")
            
                self.con.commit()
            except:
                pass  
                
            self.displaystock()
            self.displaycart()
        
        
    def find(self): 
        namel = len(self.checkname.text()) > 0

        if namel is True:
            ask2 = QMessageBox()
            ask2.setWindowTitle("Confirm?")
            ask2.setText("Enter Name?\n Did You Follow The Format?")
            ask2.setIcon(QMessageBox.Question)
            ask2.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            res = ask2.exec_()

            if res == QMessageBox.Yes:
            
                self.searchname.setEnabled(False)
                self.checkname.setEnabled(False)
                self.calculatebutton.setEnabled(True)

            else:
                pass

        else:
            missing = QMessageBox()
            missing.setWindowTitle("Missing Customer Name")
            missing.setText("Please Put Your Name")
            missing.setIcon(QMessageBox.Warning)
            missing.setStandardButtons(QMessageBox.Ok)
            missing.exec_()


    def cassshy(self):
        
        name = self.checkname.text()
        cash = self.CashBox.value()
        datetime = QDateTime.currentDateTime()
        datnow = datetime.toString('dd.MM.yyyy, hh:mm:ss')
        grandtot = float(self.Gtotal.text())


        if cash == 0.00:
            mis = QMessageBox()
            mis.setWindowTitle( " Error" )
            mis.setText( "Please Enter Amount of Cash" )
            mis.setIcon( QMessageBox.Warning )
            mis.setStandardButtons( QMessageBox.Ok )
            mis.exec_()

        elif cash < grandtot:
            mis = QMessageBox()
            mis.setWindowTitle( " Error" )
            mis.setText( "Insafucient Amount of Cash" )
            mis.setIcon( QMessageBox.Warning )
            mis.setStandardButtons( QMessageBox.Ok )
            mis.exec_()

        else:

            sukli = cash - grandtot
            self.Change.setNum(sukli)

            
            try:
                con = mysql.connector.connect(user='root', host='localhost', password='pass', database='pcsssys')
                cursor = con.cursor()
                
                cursor.execute("SELECT COUNT(Product_Name) FROM order_table")
                order_rec = cursor.fetchone()[0]
                
                if order_rec != 0:
                                        
                    incomemember = "SELECT membername FROM memberlist WHERE membername LIKE'"+name+"'"
                    cursor.execute(incomemember)
                    resultin = cursor.fetchone()

                    if resultin == None:
                        incomep = float(0.25)
                    
                    else:
                        incomep = float(0.10)
                    
                    income =float(grandtot * incomep)
                    
                    record = "INSERT INTO transaction_record (TimeandDate,Order_Rec, Customer_Name, Total_Price,Income)""VALUES(%(TimeandDate)s,%(Order_Rec)s,%(Customer_Name)s,%(Total_Price)s,%(Income)s)"
                    record_data ={'TimeandDate':datnow,'Order_Rec':order_rec,'Customer_Name':name,
                                'Total_Price':grandtot,'Income' :income}
                    cursor.execute(record,record_data)
                    con.commit()
                    
                    self.savetransaction()

                    
                else:
                    QMessageBox.warning(self, "Error","Please Reset First")
            
                
            except mysql.connector.Error as err:
                self.errorDisplay(err.errno, err.sqlstate, err.msg)
                    
            
            try:
                
                self.cursor.execute("DELETE FROM order_table")
                self.con.commit()
                    
            except mysql.connector.Error as err:
                self.errorDisplay(err.errno, err.sqlstate, err.msg)
            
            self.Print.setEnabled(True)
            self.cashbutton.setEnabled(False)
            
    def savetransaction(self):
        nameniya = self.checkname.text()
        totalpo = self.Gtotal.text()
        cashpo = self.Change.text()
        datetime2 = QDateTime.currentDateTime()
        datnow2 = datetime2.toString('dd.MM.yyyy, hh:mm:ss')
      
        try:
            
            self.con = mysql.connector.connect(user='root', host='localhost', password='pass', database='pcsssys')
            self.cursor = self.con.cursor()
         
            
            self.cursor.execute("SELECT Quantity,Product_Name,Subtotal_price FROM order_table")
            self.cart_list = self.cursor.fetchall()
            
            
            font = {
                "height": 12,
            }
            with Printer(linegap=1) as printer:

                printer.text("\n"+"\n"+"     ""Pesonal Collection Sales"+"\n"+"     Name:"+nameniya+"   "+"Time and Date:"+ datnow2+"\n"+ 
                                "     ==========================================================", font_config=font)
                for items in self.cart_list:
                    printer.text("     "+'--'.join([str(x) for x in items]) , font_config = font)
                printer.text("     =========================================================="+
                            "\n"+"     Total Price:"+totalpo+"\n"+"     Change:"+cashpo+"\n", font_config =font)
                printer.text("     THANK YOU FOR PURCHASING \n      COME AGAIN", font_config=font)
                
            
            
            ms = QMessageBox()
            ms.setWindowTitle(" Cash Paid")
            ms.setText("Thank you\n Come Again ")
            ms.setIcon(QMessageBox.Information)
            ms.setStandardButtons(QMessageBox.Ok)
            ms.exec_()
           
        except:
            print("Error")
             


    def gtotal(self): 
        
        try:
        
            sure = QMessageBox()
            sure.setWindowTitle( "Confirm?" )
            sure.setText( "Orders Complete?" )
            sure.setIcon( QMessageBox.Question )
            sure.setStandardButtons( QMessageBox.Yes | QMessageBox.No )
            asure = sure.exec_()
    
        
            if asure == QMessageBox.Yes:
                find = self.checkname.text()
        
                con = mysql.connector.connect(user='root', host='localhost', password='pass', database='pcsssys')
                cursor = con.cursor()
            
                cursor.execute("SELECT SUM(Subtotal_price) FROM order_table")
                total = cursor.fetchone()[0]
                self.TotalPrice.setNum(total)
            
                findmember = "SELECT membername FROM memberlist WHERE membername LIKE'"+find+"'"
                cursor.execute(findmember)
                result2 = cursor.fetchone()

                if result2 == None:
                    self.Discountedprice.setText("None")
                    grandt = total
                    self.Gtotal.setNum(grandt)
                   

                else:
                    dis = float(0.15)
                    grand = float(0.85)
                    discount = total * dis
                    grandt = total * grand
                    self.Discountedprice.setNum(discount)
                    self.Gtotal.setNum(grandt)
                    
                self.calculatebutton.setEnabled(False)
                self.cashbutton.setEnabled(True)

            else:
                pass
            
        except:
            QMessageBox.warning(self,'Warning', 'Your cart is empty \n'
                                'Please Order if you want to buy and Reset to Input name')

    def resetcus(self): #Binago
        
        self.exitcancel()
        self.checkname.clear()
        self.searchname.setEnabled(True)
        self.checkname.setEnabled(True)
        self.TotalPrice.clear()
        self.Discountedprice.clear()
        self.Change.clear()
        self.Gtotal.clear()
        self.CashBox.setValue(0.00)
        self.calculatebutton.setEnabled(False)


    def backhome(self):
        StartUp.show()

    def closeEvent(self, event):
        close5 = QMessageBox()
        close5.setWindowTitle("Exit Window")
        close5.setText("Are You sure to Exit?\n Once you Exit the Window your Ordered Items and Transaction will be Cancelled")
        close5.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        Done4 = close5.exec()

        if Done4 == QMessageBox.Yes: 
            self.exitcancel()
            event.accept()
            StartUp.show()
        else:
            event.ignore()
    
    def exitcancel(self):
        try:
           
            self.con = mysql.connector.connect(user ='root', host= 'localhost', password= 'pass', database = 'pcsssys')
            self.cursor = self.con.cursor()
            
            self.cursor.execute("SELECT Product_Name FROM order_table")
            orderback = self.cursor.fetchall()
            
            for row in orderback:
                proname = row[0]
                
                self.cursor.execute("SELECT Quantity FROM order_table WHERE Product_Name = '"+proname+"'")
                bringback = self.cursor.fetchone()[0]
                
                self.cursor.execute("SELECT Available_Stock FROM inventory WHERE Product_Name = '"+proname+"'")
                gotback = self.cursor.fetchone()[0]
                
                
                self.cursor.execute("SELECT Stock_sold FROM inventory WHERE Product_Name = '"+proname+"'")
                soldback = self.cursor.fetchone()[0]

                balik = bringback + gotback
                balik2 = soldback - bringback

                back_stock ="UPDATE inventory SET Available_Stock = %s WHERE Product_Name = %s "
                values5 = (balik, proname)
                self.cursor.execute(back_stock, values5)
                
                back_stock2 ="UPDATE inventory SET Stock_sold = %s WHERE Product_Name = %s "
                values6 = (balik2, proname)
                self.cursor.execute(back_stock2, values6)
                
                delete_all = "DELETE FROM order_table WHERE Product_Name ='"+proname+"'"
                self.cursor.execute(delete_all)
                
                self.con.commit()
                
                  
            
        except mysql.connector.Error as err:
            self.errorDisplay(err.errno, err.sqlstate, err.msg)
            
            
        
    def errorDisplay(self,errorCode, sqlState,text):
        error1 = "Error Code:"+str(errorCode)
        error2 = "SQL State" + sqlState
        error3 = "Description" +text
        QMessageBox.critical(self, "Error", error1 +error2+ error3)
        
        
     
    
#Transaction History Module
class Ui_Transactionwindow(QtWidgets.QMainWindow):
    def setupUi(self, Transactionwindow):
        Transactionwindow.setObjectName("Transactionwindow")
        Transactionwindow.resize(1051, 742)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Transactionwindow.sizePolicy().hasHeightForWidth())
        Transactionwindow.setSizePolicy(sizePolicy)
        Transactionwindow.setMinimumSize(QtCore.QSize(1032, 600))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../.designer/backup/TransactionIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Transactionwindow.setWindowIcon(icon)
        Transactionwindow.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.centralwidget = QtWidgets.QWidget(Transactionwindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(400, 50))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Subheading")
        font.setPointSize(24)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.Transaction = QtWidgets.QTableWidget(self.centralwidget)
        self.Transaction.setMinimumSize(QtCore.QSize(400, 400))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.Transaction.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Transaction.setFont(font)
        self.Transaction.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 11pt \"Segoe UI\";\n"
"alternate-background-color: rgb(255, 255, 127);")
        self.Transaction.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Transaction.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.Transaction.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.Transaction.setAlternatingRowColors(True)
        self.Transaction.setTextElideMode(QtCore.Qt.ElideLeft)
        self.Transaction.setShowGrid(True)
        self.Transaction.setWordWrap(False)
        self.Transaction.setCornerButtonEnabled(True)
        self.Transaction.setColumnCount(4)
        self.Transaction.setObjectName("Transaction")
        self.Transaction.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Transaction.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Transaction.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Transaction.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Transaction.setHorizontalHeaderItem(3, item)
        self.Transaction.horizontalHeader().setDefaultSectionSize(240)
        self.Transaction.horizontalHeader().setHighlightSections(True)
        self.Transaction.horizontalHeader().setSortIndicatorShown(True)
        self.Transaction.horizontalHeader().setStretchLastSection(False)
        self.Transaction.verticalHeader().setDefaultSectionSize(44)
        self.Transaction.verticalHeader().setMinimumSectionSize(37)
        self.Transaction.verticalHeader().setStretchLastSection(False)
        self.gridLayout.addWidget(self.Transaction, 1, 0, 1, 1)
        Transactionwindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Transactionwindow)
        self.statusbar.setObjectName("statusbar")
        Transactionwindow.setStatusBar(self.statusbar)

        self.retranslateUi(Transactionwindow)
        QtCore.QMetaObject.connectSlotsByName(Transactionwindow)
        
        self.timer3 = QtCore.QTimer()
        self.timer3.timeout.connect(self.transdisplay)
        self.timer3.start(1000*2)
        

    def retranslateUi(self, Transactionwindow):
        _translate = QtCore.QCoreApplication.translate
        Transactionwindow.setWindowTitle(_translate("Transactionwindow", "Transaction History"))
        self.label_2.setText(_translate("Transactionwindow", "Transaction History"))
        item = self.Transaction.horizontalHeaderItem(0)
        item.setText(_translate("Transactionwindow", "Customer Name"))
        self.Transaction.setColumnWidth( 0, 350 )
        item = self.Transaction.horizontalHeaderItem(1)
        item.setText(_translate("Transactionwindow", "Payable Amount"))
        self.Transaction.setColumnWidth( 1, 175 )
        item = self.Transaction.horizontalHeaderItem(2)
        item.setText(_translate("Transactionwindow", "Income"))
        self.Transaction.setColumnWidth( 2, 175 )
        item = self.Transaction.horizontalHeaderItem(3)
        item.setText(_translate("Transactionwindow", "Date and Time of Transaction"))
        self.Transaction.setColumnWidth( 3, 300 )

    def transdisplay(self):
        
        try:
            try:
                self.con = mysql.connector.connect(user="root", host="localhost", password="pass", database="pcsssys")
                self.cursor = self.con.cursor()

                self.cursor.execute("SELECT Customer_Name,Total_Price, Income,TimeandDate FROM transaction_record")
                self.result10 = self.cursor.fetchall()
                
                
            except mysql.connector.Error as err:
                self.errorDisplay(err.errno, err.sqlstate, err.msg)
            
            self.numcolumns = len(self.result10[0])
            self.numrows = len(self.result10)
            
            self.Transaction.setColumnCount(self.numcolumns)
            self.Transaction.setRowCount(self.numrows)
            
            for row in range(self.numrows):
                for column in range(self.numcolumns):
                    if isinstance(self.result10[row][column],int):
                        self.Transaction.setItem(row,column,QTableWidgetItem(str(self.result10[row][column])))
                        
                    elif isinstance(self.result10[row][column],float):
                        self.Transaction.setItem(row,column,QTableWidgetItem(str(self.result10[row][column])))
                    else:
                        self.Transaction.setItem(row,column,QTableWidgetItem((self.result10[row][column])))
                            
        except:
            pass
            
        
        
    def closeEvent(self, event):
        close = QMessageBox()
        close.setWindowTitle("Close Window")
        close.setText("Done checking your Transaction History?")
        close.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        Done = close.exec()

        if Done == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()
            
        
    def errorDisplay(self,errorCode, sqlState,text):
        error1 = "Error Code:"+str(errorCode)
        error2 = "SQL State" + sqlState
        error3 = "Description" +text
        QMessageBox.critical(self, "Error", error1 +error2+ error3)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    StartUp = Ui_StartUp()
    ui = Ui_StartUp()
    ui.setupUi(StartUp)

    CustomerScrn = Ui_CustomerScrn()
    ui2 = Ui_CustomerScrn()
    ui2.setupUi(CustomerScrn)

    Login = Ui_Login()
    ui3 = Ui_Login()
    ui3.setupUi(Login)
    
    Memberlist =Ui_Memberlist()
    ui4 = Ui_Memberlist()
    ui4.setupUi(Memberlist)

    Transactionwindow = Ui_Transactionwindow()
    ui5 = Ui_Transactionwindow()
    ui5.setupUi(Transactionwindow)

    OwnerScrn = Ui_OwnerScrn()
    ui6 = Ui_OwnerScrn()
    ui6.setupUi(OwnerScrn)

    Changepass = Ui_Changepass()
    ui7 = Ui_Changepass()
    ui7.setupUi(Changepass)


    StartUp.show()
    sys.exit(app.exec_())
